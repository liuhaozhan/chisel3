/*
 Copyright (c) 2011, 2012, 2013, 2014 The Regents of the University of
 California (Regents). All Rights Reserved.  Redistribution and use in
 source and binary forms, with or without modification, are permitted
 provided that the following conditions are met:

    * Redistributions of source code must retain the above
      copyright notice, this list of conditions and the following
      two paragraphs of disclaimer.
    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      two paragraphs of disclaimer in the documentation and/or other materials
      provided with the distribution.
    * Neither the name of the Regents nor the names of its contributors
      may be used to endorse or promote products derived from this
      software without specific prior written permission.

 IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
 SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
 ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 REGENTS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE. THE SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF
 ANY, PROVIDED HEREUNDER IS PROVIDED "AS IS". REGENTS HAS NO OBLIGATION
 TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
 MODIFICATIONS.
*/

package Chisel
import scala.collection.mutable.ArrayBuffer

class ChiselException(message: String, cause: Throwable) extends Exception(message, cause)

object throwException {
  def apply(s: String, t: Throwable = null) =
    throw new ChiselException(s, t)
}

/** This Singleton implements a log4j compatible interface.
  It is used through out the Chisel package to report errors and warnings
  detected at runtime.
  */
object ChiselError {
  val startTime = System.currentTimeMillis
  def elapsedTime: Long = System.currentTimeMillis - startTime

  def hasErrors = errors.exists(_.isFatal)

  def clear(): Unit = errors.clear

  /** Log an error message */
  def error(m: => String): Unit =
    errors += new Error(m, getUserLineNumber)

  /** Log a warning message */
  def warning(m: => String): Unit =
    errors += new Warning(m, getUserLineNumber)

  /** Emit an informational message */
  def info(m: String): Unit =
    println(new Info(" [%2.3f] %s".format(elapsedTime/1e3, m), None))

  /** Prints error messages generated by Chisel at runtime. */
  def report(): Unit = errors foreach println

  /** Throw an exception if any errors have yet occurred. */
  def checkpoint(): Unit = if(hasErrors) {
    import Console._
    throw new IllegalStateException(
      UNDERLINED + "CODE HAS " + errors.filter(_.isFatal).length + RESET +
      UNDERLINED + " " + RED + "ERRORS" + RESET +
      UNDERLINED + " and " + errors.filterNot(_.isFatal).length + RESET +
      UNDERLINED + " " + YELLOW + "WARNINGS" + RESET)
  }

  private def findFirstUserFrame(stack: Array[StackTraceElement]): Option[StackTraceElement] = {
    def isUserCode(ste: StackTraceElement): Boolean = {
      def isUserModule(c: Class[_]): Boolean =
        c != null && (c == classOf[Module] || isUserModule(c.getSuperclass))
      isUserModule(Class.forName(ste.getClassName))
    }

    stack.indexWhere(isUserCode) match {
      case x if x < 0 => None
      case x => Some(stack(x))
    }
  }

  private def getUserLineNumber =
    findFirstUserFrame(Thread.currentThread().getStackTrace)

  private val errors = ArrayBuffer[LogEntry]()
}

abstract class LogEntry(msg: => String, line: Option[StackTraceElement]) {
  def isFatal: Boolean = false
  def format: String

  override def toString: String = line match {
    case Some(l) => s"${format} ${l.getFileName}:${l.getLineNumber}: ${msg} in class ${l.getClassName}"
    case None => s"${format}: ${msg}"
  }

  protected def tag(name: String, color: String): String =
    s"[${color}${name}${Console.RESET}]"
}

class Error(msg: => String, line: Option[StackTraceElement]) extends LogEntry(msg, line) {
  override def isFatal = true
  def format = tag("error", Console.RED)
}

class Warning(msg: => String, line: Option[StackTraceElement]) extends LogEntry(msg, line) {
  def format = tag("warn", Console.YELLOW)
}

class Info(msg: => String, line: Option[StackTraceElement]) extends LogEntry(msg, line) {
  def format = tag("info", Console.MAGENTA)
}
